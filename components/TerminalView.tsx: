import React, { useState, useEffect, useRef } from 'react';

const ImmersiveView: React.FC = () => {
  const [terminalContent, setTerminalContent] = useState<string[]>([]);
  const [userInput, setUserInput] = useState('');
  const terminalRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    initializeTerminalContent();
  }, []);

  const initializeTerminalContent = () => {
    const bootSequence = [
      'Booting up...',
      'Initializing system...',
      'Loading modules...',
      'System ready.',
      '',
      'Welcome to the Project Terminal Interface',
      '',
      'Type "help" to see available commands.',
      '',
    ];

    let idx = 0;
    setTerminalContent([]);
    const interval = setInterval(() => {
      setTerminalContent((prev) => [...prev, bootSequence[idx]]);
      idx++;
      if (idx >= bootSequence.length) {
        clearInterval(interval);
      }
    }, 500);
  };

  const handleCommand = (command: string) => {
    let output: string[] = [];
    switch (command.toLowerCase()) {
      case 'help':
        output = [
          'Available commands:',
          '- about     : Overview of the project',
          '- techstack : Technologies used',
          '- ascii     : Show project ASCII art',
          '- clear     : Clear the terminal',
        ];
        break;
      case 'about':
        output = [
          'Project Case Study: E-commerce Platform',
          'Description: A full-stack e-commerce solution built with Next.js and Stripe.',
        ];
        break;
      case 'techstack':
        output = [
          'Technologies Used:',
          '- React',
          '- Next.js',
          '- Node.js',
          '- Stripe API',
          '- MongoDB',
        ];
        break;
      case 'ascii':
        output = [
          '  ____  ____  ____  ____ ',
          ' / ___||  _ \\|  _ \\|  _ \\',
          ' \\___ \\| |_) | |_) | | | |',
          '  ___) |  __/|  __/| |_| |',
          ' |____/|_|   |_|   |____/ ',
          '',
          'E-commerce Platform',
        ];
        break;
      case 'clear':
        setTerminalContent([]);
        return;
      default:
        output = [`'${command}' is not recognized. Type 'help' for a list of commands.`];
        break;
    }
    setTerminalContent((prev) => [...prev, `> ${command}`, ...output, '']);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUserInput(e.target.value);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleCommand(userInput);
      setUserInput('');
    }
  };

  useEffect(() => {
    terminalRef.current?.scrollTo(0, terminalRef.current.scrollHeight);
  }, [terminalContent]);

  const handleTerminalClick = () => {
    inputRef.current?.focus();
  };

  return (
    <div
      className="bg-black text-green-400 p-4 rounded-lg h-96 overflow-auto font-mono relative"
      ref={terminalRef}
      onClick={handleTerminalClick}
      role="region"
      aria-label="Terminal Interface"
    >
      <div className="whitespace-pre-wrap">
        {terminalContent.map((line, index) => (
          <div key={index}>{line}</div>
        ))}
      </div>
      <div className="flex items-center mt-2">
        <span className="mr-2">&gt;</span>
        <input
          type="text"
          value={userInput}
          onChange={handleInputChange}
          onKeyDown={handleInputKeyDown}
          ref={inputRef}
          autoFocus
          className="bg-transparent border-none outline-none text-green-400 flex-1"
          aria-label="Command Input"
        />
      </div>
    </div>
  );
};

export default ImmersiveView;
